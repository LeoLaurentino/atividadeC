/******************************************************************************
6. Fazer um programa que recebe 3 valores não inteiros do usuário e mostra o maior
deles, o menor deles e o valor intermediário.
*******************************************************************************/

#include <stdio.h>

int main() {   
    float v1, v2, v3, menor, maior, media;
    
    printf("Digite tres valores: \n");
    scanf("%f %f %f", &v1, &v2, &v3);
    
    // saber se é menor
    if (v1 < v2){
        if (v1 < v3)
            menor = v1;
        else
            menor = v1;
    }
    else{
        if(v2 < v3)
            menor = v2;
        else
            menor = v3;
            
    }
    
    // saber se é maior
    if(v1 > v2){
        if (v1 > v3)
            maior = v1;
        else
            maior = v3;
    }
    else{
        if(v2 > v3)
            maior = v2;
        else
            maior = v3;
    }    
    
    printf("Menor: %f\nMaior: %f\n", menor, maior);
    
    media = (v1 + v2 +v3)/3;
    printf("A média é: %f ", media);
}


/******************************************************************************

17. O número 3025 possui a seguinte característica: 30 + 25 = 55 -> 55*55 = 3025.
Fazer um programa para obter todos os números de 4 algarismos com a mesma
característica do número 3025.
*******************************************************************************/

#include <stdio.h>

int main()
{
      int numero=1000;
      while(numero <= 9999)
      {
                if(numero == (((numero/100)+(numero%100))*((numero/100)+(numero%100))))
                       printf("%d: %d+%d=%d -> %d^2=%d \n", numero, numero/100,numero%100,(numero/100)+(numero%100),(numero/100)+(numero%100),numero);
                numero=numero+1;
      }
}


/******************************************************************************

28. Fazer um programa para mostrar a soma de todos os números 4 do dominó.

*******************************************************************************/



#include <stdio.h>

int main() {
    int i, j, soma;

    soma = 0;  // inicializa a soma com zero

    for (i = 0; i <= 6; i++) {
        for (j = i; j <= 6; j++) {
            if (i == 4 || j == 4) {  // verifica se algum dos números é 4
                soma++;  // soma 1 à soma total
            }
        }
    }

    printf("A soma de todos os números 4 do dominó é: %d\n", soma);

    return 0;
}


/******************************************************************************
61. Crie um programa que lê 6 valores inteiros e, em seguida, mostre na tela os
valores lidos.
*******************************************************************************/
#include <stdio.h>

int main() {
    int vl1[6], p;

    // Absorve os valores inteiros
    printf("Digite 6 valores inteiros:\n");
    for (p = 0; p < 6; p++) {
        scanf("%d", &vl1[p]);
    }
    
    // Mostrar na tela os valores
    printf("Valores lidos:\n");
    for (p = 0; p < 6; p++) {
        printf("%d ", vl1[p]);
    }
    
    return 0;
}



/******************************************************************************
72. Fazer um programa para ler 5 valores e, em seguida, mostrar a posição onde
se encontram o maior e o menor valor.
*******************************************************************************/



#include <stdio.h>

int main() {
    int valores[5], p, maiorvalor, menorvalor;;

    // Lê os valores do usuário
    printf("Entre com 5 valores:\n");
    for (p = 0; p < 5; p++) {
        scanf("%d", &valores[p]);
    }
    
    // Inicializa as posições do maior e do menor valor
    maiorvalor = menorvalor = 0;
    
    // Encontra as posições do maior e do menor valor
    for (p = 1; p < 5; p++) {
        if (valores[p] > valores[maiorvalor]) {
            maiorvalor = p;
        }
        if (valores[p] < valores[menorvalor]) {
            menorvalor = p;
        }
    }
    
    // Exibe as posições do maior e do menor valor
    printf("Posicao do maior valor: %d\n", maiorvalor);
    printf("Posicao do menor valor: %d\n", menorvalor);
    
    return 0;
}



/******************************************************************************
83.Faça um programa que leia dez conjuntos de dois valores, o primeiro representando
o número do aluno e o segundo representando a sua altura em metros. Encontre o
aluno mais baixo e o mais alto. Mostre o número do aluno mais baixo e do mais
alto, juntamente com suas alturas.

*******************************************************************************/




#include <stdio.h>

int main() {
    int numerodo_aluno, alunomaisbaixo, alunomaisalto;
    float altura, altura_mais_baixa = 4.0, altura_mais_alta = 0.0;  // estipulada uma altura máxima de 4 metros

    for (int p = 1; p <= 10; p++) {
        printf("Digite o número e a altura do aluno: ");
        scanf("%d %f", &numerodo_aluno, &altura);

        if (altura < altura_mais_baixa) {  // para fazer a verificacao se a altura que foi informada é a mais alta ou a altura mais baixa
            altura_mais_baixa = altura;
            alunomaisbaixo = numerodo_aluno;
        }

        if (altura > altura_mais_alta) {
            altura_mais_alta = altura;
            alunomaisalto = numerodo_aluno;
        }
    }

    printf("O aluno mais baixo: número %d, altura %.2f m\n", alunomaisbaixo, altura_mais_baixa);
    printf("O aluno mais alto: número %d, altura %.2f m\n", alunomaisalto, altura_mais_alta);

    return 0;
}


/******************************************************************************
94. Faça um programa que leia dois números a e b (positivos menores que 10000)
e:...
*******************************************************************************/



#include <stdio.h>

int main() {
    int vt_a[4], vt_b[4], vt_soma[5];
    int tamanho, a, b;

    // lê os números a e b
    printf("Informe o valor de a: ");
    scanf("%d", &a);
    printf("Informe o valor de b: ");
    scanf("%d", &b);
    
    // faz o preenchimento do vt_b 
    for (int i = 0; i < 4; i++) {
        vt_a[i] = a % 10;
        a /= 10;
    }
    
    // faz o preenchimento do vt_b 
    for (int i = 0; i < 4; i++) {
        vt_b[i] = b % 10;
        b /= 10;
    }
    
    // faz a soma a soma e guarda no vt_soma
    int carry = 0;
    for (int i = 0; i < 4; i++) {
        int s = vt_a[i] + vt_b[i] + carry;
        carry = 0;
        if (s >= 10) {
            s -= 10;
            carry = 1;
        }
        vt_soma[i] = s;
    }
    if (carry) {
        vt_soma[4] = 1;
        tamanho = 5;
    }
    else {
        tamanho = 4;
    }
    
    // para exibir os vetores
    printf("Vetor de a: ");
    for (int i = 3; i >= 0; i--) {
        printf("%d ", vt_a[i]);
    }
    printf("\nVetor de b: ");
    for (int i = 3; i >= 0; i--) {
        printf("%d ", vt_b[i]);
    }
    printf("\nVetor de soma: ");
    for (int i = tamanho - 1; i >= 0; i--) {
        printf("%d ", vt_soma[i]);
    }
    printf("\n");
    
    return 0;
}


/******************************************************************************
105. Faça um programa para receber do usuário a dimensão de um array (máx. 20),
os elementos desse array e efetuar a sua ordenação utilizando o método da bolha
(bubble-sort).
*******************************************************************************/





#include <stdio.h>

int main() {
    int n, temp, i, t;
    int arr[20];

    printf("Informe a dimensao do array (max. 20): ");
    scanf("%d", &n);

    printf("Informe os elementos do array:\n");
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Ordenar o array fazendo uso do método bubble-sort
    for (i = 0; i < n-1; i++) {
        for (t = 0; t < n-i-1; t++) {
            if (arr[t] > arr[t+1]) {
                // Troca os elementos adjacentes de posição
                temp = arr[t];
                arr[t] = arr[t+1];
                arr[t+1] = temp;
            }
        }
    }

    // Imprimir o array de forma ordenada ordenado
    printf("Array ordenado: ");
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}




/******************************************************************************
116. Faça um programa que preenche uma matriz 4 x 4 com o produto do valor da
linha e da coluna de cada elemento. Em seguida, imprima na tela a matriz.
*******************************************************************************/


#include <stdio.h>

int main() {
    int matriz[4][4];
    int p, x;

    // Preenchimento da matriz, com o produto da linha e da coluna de cada elemento
    for (p = 0; p < 4; p++) {
        for (x = 0; x < 4; x++) {
            matriz[p][x] = p * x;
        }
    }

    // Para imprimir a matriz
    for (p = 0; p < 4; p++) {
        for (x = 0; x < 4; x++) {
            printf("%d ", matriz[p][x]);
        }
        printf("\n");
    }

    return 0;
}




/******************************************************************************
127. Faça um programa para gerar automaticamente números entre 0 e 99 de uma
cartela de bingo. Sabendo que cada cartela deverá conter 5 linhas de 5 números,
gere estes dados de modo a não ter números repetidos dentro das cartelas. O
programa deve exibir na tela a cartela gerada.
*******************************************************************************/

#include <stdio.h>
#include <conio.h>
#include <time.h>
#include <stdlib.h>
int main() {
  int aleatorio[50]; 
  srand(time(NULL)); 
  int cont, j, achou, num;
  for (cont = 0; cont < 25; cont++) {
    do {
      achou = 0; 
      num = rand() % 99 +0;

      for (j = 0; j < 25; j++)
        if (num == aleatorio[j])
          achou = 1; 

    } while (achou);
    aleatorio[cont] = num;

  }
  for (j = 0; j < 25; j++){
  if (j%5==0)
		printf("\n");
		printf("[%d]",aleatorio[j]);
		}
}


/******************************************************************************
149. Crie um programa que contenha um array de inteiros contendo 5 elementos.
Utilizando apenas aritmética de ponteiros, leia esse array do teclado e imprima
o dobro de cada valor lido.                          
*******************************************************************************/


#include <stdio.h>

int main() {
    int array[5];
    int *vap = array;

    // Leitura Array
    printf("Digite 5 numeros inteiros:\n");
    for (int p = 0; p < 5; p++) {
        scanf("%d", vap);
        vap++;
    }

    // Para imprimir o dobro dos numeros
    printf("\nO dobro dos numeros digitados eh:\n");
    vap = array;
    printf("%d\n%d\n%d\n%d\n%d\n", (*vap)*2, (*(vap+1))*2, (*(vap+2))*2, (*(vap+3))*2, (*(vap+4))*2);

    return 0;
}


/******************************************************************************
160. Escreva um programa que declare um array de inteiros e um ponteiro para
inteiros. Associe o ponteiro ao array. Agora, some mais um (+1) a cada posição
do array usando o ponteiro (use *).
*******************************************************************************/


#include <stdio.h>
#define TAM 7 

int main() {
    int ay[TAM] = {20, 31, 41, 51, 61, 71, 81}; // criação do array e declaração dos valores
    int *p; // criando o ponteiro que será utilizado nos num. inteiros declarados
    int s; // criando contador
    
    p = ay; // para interligar ponteiro e array
    
    // para realizar a soma de +1 nas posições do array, atraves de ponteiro
    for (s = 0; s < TAM; s++) {
        *(p+s) += 1;
    }
    
    // para exibição dos valore do array modificados
    for (int s = 0; s < TAM; s++) {
        printf("%d ", ay[s]);
    }
    printf("\n");
    
    return 0;
}


/******************************************************************************
171. Fazer um programa para receber dois números do usuário, chamar a função e
mostrarse os números são iguais. Além disso, mostrar sua soma e seu produto.
*******************************************************************************/



#include <stdio.h>

    //declaração da função
int ver(int vl1, int vl2, int *soma, int *produto) {
    int resultado = (int) vl1 * vl2;
    
    if (vl1 == vl2) {            //se os valores forem iguais será retornado 1
        return 1;
    }
    else if (resultado > 2147483647 || resultado < -2147483647) {   //limites máximo e mínimo de uma variavel 'int'.
        return -1;              //se o valor estourar o limite do 'int' retornará -1.
    }
    else {                      //caso os valores sejam diferentes
        *soma = vl1 + vl2;
        *produto = resultado;
        return 0;
    }
}

int main() {
    int vl1, vl2, soma, produto, resultado;

    //digitar o primeiro e depois o segundo numero
    printf("Digite o primeiro número: ");
    scanf("%d", &vl1);

    printf("Digite o segundo número: ");
    scanf("%d", &vl2);
    
    //chamando a função 'ver' declarado antes do main()
    resultado = ver(vl1, vl2, &soma, &produto);

    if (resultado == 1) {
        printf("Os números são iguais\n");
    }
    else if (resultado == -1) {
        printf("A soma ou o produto estourou a faixa dos inteiros\n");
    }
    else {
        printf("Os números são diferentes\n");
        printf("A soma é %d\n", soma);
        printf("O produto é %d\n", produto);
    }

    return 0;
}

/******************************************************************************
182. Fazer um programa em C para:1. receber um nome do usuário na forma de string
(máx. 100 caracteres). 2. mostrar o nome no formato de autor de referência bibliográfica
(último sobrenome no início, depois as iniciais dos demais nomes, eliminando todas as
palavras com dois caracteres ou menos).
*******************************************************************************/

#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX_CARACTERES 100

int main() {
    char nome[MAX_CARACTERES];
    char sobrenome[MAX_CARACTERES];
    char inicial[2];
    int i, contador, num_nomes;
    int ultespaco, espacos[4];

    printf("Digite o nome completo: ");
    fgets(nome, MAX_CARACTERES, stdin);

    num_nomes = 0;
    ultespaco = -1;
    for (i = 0; i < strlen(nome); i++) {
        if (nome[i] == ' ') {
            if (i - ultespaco - 1 > 2) {
                espacos[num_nomes] = ultespaco + 1;
                num_nomes++;
            }
            ultespaco = i;
        }
    }
    if (strlen(nome) - ultespaco - 1 > 2) {
        espacos[num_nomes] = ultespaco + 1;
        num_nomes++;
    }

    strncpy(sobrenome, nome + espacos[num_nomes - 1], strlen(nome) - espacos[num_nomes - 1] - 1);
    sobrenome[strlen(nome) - espacos[num_nomes - 1] - 1] = '\0';

    sobrenome[0] = toupper(sobrenome[0]); // para conversão do primeiro caractere para caixa alta

    printf("%s, ", sobrenome);

    contador = 0;
    for (i = 0; i < num_nomes - 1; i++) {
        strncpy(inicial, nome + espacos[i], 1);
        inicial[1] = '\0';
        printf("%c. ", toupper(inicial[0])); // para conversão e seguido de (.)

        contador++;
        if (contador == 5) {
            break;
        }
    }
    printf("\n");

    return 0;
}



/******************************************************************************
193. Escreva um programa que utilize uma função "replace" que aceita um string como
parâmetro e retorna um inteiro. A função substitui todos os espaços do seu
parâmetro pelo caracter '-', e retorna o número de substituições feitas.
O programa que a usa deverá testar a sua funcionalidade.                    
*******************************************************************************/


#include <stdio.h>
#include <string.h>

// Função criada para substitui os espaços por '' - '' e informar quantidade substit. 
int replace_espacos(char *string) {
    int p;
    int contador = 0; // declaração do contador 

    for (p = 0; p < strlen(string); p++) {
        if (string[p] == ' ') { 
            string[p] = '-'; 
            contador++; 
        }
    }
    return contador; // retorna o número de substituições feitas
}

// Informando a função principal
int main() {
    
    int numero_replacements;
    char string[100]; // define um array de caracteres para armazenar a string
    printf("Digite uma string: "); 
    fgets(string, 100, stdin); // 
    numero_replacements = replace_espacos(string);
    printf("String modificada: %s\n", string); 
    printf("Número de substituições feitas: %d\n", numero_replacements); // exibe o número de substituições feitas
    return 0; 
}


/******************************************************************************
204. Cebolinha é um personagem de história em quadrinhos que quando fala, troca
o R pelo L. Escreva uma função cebolinhaString, que recebe uma string s e um
buffer (um vetor capaz de armazenar outra string com o mesmo tamanho de s) e
armazene no buffer uma versão de s com todos os R's trocados por L's, exceto
quando o R é a última letra de uma palavra. Dois R's seguidos devem ser
substituídos por um único L. Lembre-se de manter as letras maiúsculas e
minúsculas como no texto original.
*******************************************************************************/


#include <stdio.h>
#include <string.h>
#include <ctype.h>

// função que recebe uma string S e um buffer, e armazena no buffer uma versão de s.
void cebolinhaString(char *s, char *buffer) {
    int i, t = 0;
    int taman = strlen(s);

    for (i = 0; i < taman; i++) {
        // para verificar se o caractere atual em 's' é 'r' (caixa baixa ou alta)
        if (tolower(s[i]) == 'r') {
            if (i == taman - 1 || isspace(s[i+1]) || s[i+1] == '\0') {
                buffer[t++] = s[i]; // mantém o caractere 'r' no buffer
            } else if (tolower(s[i+1]) == 'r') {
                i++;
            } else {
                // substituiçao do caractere 'r' pelo caractere 'L' ou 'l'
                buffer[t++] = (isupper(s[i]) ? 'L' : 'l');
            }
        } else {
            buffer[t++] = s[i];
        }
    }

    buffer[t] = '\0'; // coloca um caractere nulo, indicando o final da string
}

int main() {
    char s[100];
    char buffer[100];

    printf("Digite uma string: ");
    fgets(s, 100, stdin); // ver a string digitada pelo usuário (com no máximo 100 caracteres)

    cebolinhaString(s, buffer); // para modificar a string 's'

    printf("Texto original: %s\n", s); 
    printf("Texto modificado: %s\n", buffer);

    return 0;
}

